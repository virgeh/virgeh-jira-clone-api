{
	"info": {
		"_postman_id": "930189bf-2f54-4985-8bca-afce2eadd822",
		"name": "VirgeHaavasalu_jira_clone_comments Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30149097"
	},
	"item": [
		{
			"name": "0. Authentication",
			"item": [
				{
					"name": "Get authentication token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"token\", jsonData.authToken);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authentication/guest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"guest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current user id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"current_user_id\", jsonData.currentUser.id);\r",
									"\r",
									"pm.test(\"Retrieving user information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/currentUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"currentUser"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "1. Create Comments",
			"item": [
				{
					"name": "1.1 Create issue for comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"New Issue for Comments\",\r\n    \"type\": \"task\",\r\n    \"status\": \"backlog\",\r\n    \"priority\": \"3\",\r\n    \"description\": \"This issue is created to test comments.\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Add a comment to created issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is a comment on the recently created issue.\");\r",
									"    pm.expect(parseInt(jsonData.comment.issueId)).to.eql(parseInt(pm.globals.get(\"issue_id\")));\r",
									"    pm.expect(parseInt(jsonData.comment.userId)).to.eql(parseInt(pm.globals.get(\"current_user_id\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a comment on the recently created issue.\",\r\n    \"issueId\": \"{{issue_id}}\",\r\n    \"userId\": \"{{current_user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 Add another comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"second_comment_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Second comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is another comment on the recently created issue.\");\r",
									"    pm.expect(parseInt(jsonData.comment.issueId)).to.eql(parseInt(pm.globals.get(\"issue_id\")));\r",
									"    pm.expect(parseInt(jsonData.comment.userId)).to.eql(parseInt(pm.globals.get(\"current_user_id\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is another comment on the recently created issue.\",\r\n    \"issueId\": \"{{issue_id}}\",\r\n    \"userId\": \"{{current_user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 Verify comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Issue details retrieval was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Both comments are present in the issue details\", function () {\r",
									"    var commentIds = jsonData.issue.comments.map(function(comment) {\r",
									"        return comment.id;\r",
									"    });\r",
									"    \r",
									"    pm.expect(commentIds).to.include(parseInt(pm.globals.get(\"comment_id\")));\r",
									"    pm.expect(commentIds).to.include(parseInt(pm.globals.get(\"second_comment_id\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 1.5  Create a comment with required fields missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Comment creation with missing fields was unsuccessful\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"userId is required\");\r",
									"});\r",
									"\r",
									"//Comment creation with missing fields was unsuccessful | BUG - AssertionError: expected response to have status code 400 but got 500"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This comment is missing userId.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6   Create a comment with special symbols in the text field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment creation with special symbols was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment).to.exist;\r",
									"    pm.expect(jsonData.comment.body).to.include(\"¤%&/¤”\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a comment with special symbols: ¤%&/¤”\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Update Comments",
			"item": [
				{
					"name": "2.1 Create a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment).to.exist;\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is a comment to be updated.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a comment to be updated.\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Update the Created Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Comment update was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.comment).to.exist;\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This comment has been updated.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This comment has been updated.\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 2.3 Delete the comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Comment deletion was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Test result is: Comment deletion was successful and the response body message is - \"body\": \"This comment has been updated.\"\r",
									"//BUG - The response body message should be \"The comment was deleted.\"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4  Try updating the deleted comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Attempt to update deleted comment\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This comment should not be updated because it was deleted.\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 Create a comment for testing missing fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"comment_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a test comment.\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5.1 Update comment missing 'body' field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Update comment missing 'body' field\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": null,\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 2.5.2 Update comment missing 'userId' field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Update comment missing 'userId' field\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors.\");\r",
									"});\r",
									"\r",
									"// BUG ? - In the JSON body there should be \"body\", \"userId\", \"issueId\" fields. Updating comment missing issueId field | AssertionError: expected response to have status code 400 but got 200"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a test comment.\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG 2.5.3 Update comment missing 'issueId' field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Update comment missing 'issueId' field\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error.message).to.include(\"There were validation errors.\");\r",
									"});\r",
									"\r",
									"// BUG ? - In the JSON body there should be \"body\", \"userId\", \"issueId\" fields. Updating comment missing issueId field | AssertionError: expected response to have status code 400 but got 200"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjkwMjA1NSwiaWF0IjoxNzIxNjQ0MTA0LCJleHAiOjE3MzcxOTYxMDR9.L_oJ6Se9a_gBgFF4i8QLQ-i9SMHFh-8Nnb8-TfjJ10k"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is a test comment.\",\r\n    \"userId\": \"{{current_user_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jira-api.ivorreic.com",
			"type": "string"
		}
	]
}